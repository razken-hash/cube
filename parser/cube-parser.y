%{
#include <stdio.h>

int yylex();
int yyerror();
%}


%token  OUTPUT 
%token  IF  ELSE 
%token  COMMA  SEMICOLON  DOT COLON
%token  INTEGER  REAL  TEXT  BOOL  TABLEAU  
%token  LOOP  WHILE
%token  OPEN_PARENTHESIS  CLOSE_PARENTHESIS  CURLY_OPEN_BRACKET  CURLY_CLOSE_BRACKET  OPEN_BRACKET  CLOSE_BRACKET
%token  STRUCT_DECLARE
%token  EQUAL  DIFFERENT  AND  OR  NOT  LESS  GREATER  LESSEQUAL  GREATEREQUAL
%token  ADD  SUB  MULT  DIV  MOD  
%token  ASSIGNMENT
%start PROGRAM
%left  ADD  SUB  MULT  DIV  MOD 
%right   NOT
%left  AND  OR  LESS  GREATER   LESSEQUAL  GREATEREQUAL  EQUAL  DIFFERENT

%%

PROGRAM:                      
 | PROGRAM LINE 
 ;
LINE: STATEMENT  SEMICOLON
 ;
STATEMENT: IF_STATEMENT
| ELSE_STATEMENT
| ASSIGNMENT_STATEMENT
| LOOP_STATEMENT
| WHILE_STATEMENT
| OUTPUT_STATEMENT
| EXPRESSION_STATEMENT
| DECLARATION_STATEMENT
/* | RECORD_DECLARATION
| TABLE_DECLARATION */

;
ASSIGNMENT_STATEMENT:  STRUCT_DECLARE  ASSIGNMENT EXPRESSION
;
LOOP_STATEMENT:  LOOP  OPEN_PARENTHESIS ASSIGNMENT_STATEMENT  COMMA EXPRESSION  COMMA EXPRESSION  CLOSE_PARENTHESIS  CURLY_OPEN_BRACKET PROGRAM  CURLY_CLOSE_BRACKET
;
WHILE_STATEMENT:  WHILE  OPEN_PARENTHESIS EXPRESSION  CLOSE_PARENTHESIS  CURLY_OPEN_BRACKET PROGRAM  CURLY_CLOSE_BRACKET
;
IF_STATEMENT:  IF  OPEN_PARENTHESIS EXPRESSION  CLOSE_PARENTHESIS  CURLY_OPEN_BRACKET PROGRAM  CURLY_CLOSE_BRACKET
|  IF  OPEN_PARENTHESIS EXPRESSION  CLOSE_PARENTHESIS  CURLY_OPEN_BRACKET PROGRAM  CURLY_CLOSE_BRACKET ELSE_STATEMENT
;
ELSE_STATEMENT:  ELSE  CURLY_OPEN_BRACKET PROGRAM  CURLY_CLOSE_BRACKET
;

TYPE:  INTEGER |  REAL |  TEXT |  BOOL
;
OUTPUT_STATEMENT:  OUTPUT  OPEN_PARENTHESIS EXPRESSION  CLOSE_PARENTHESIS
;
EXPRESSION_STATEMENT: EXPRESSION
;
DECLARATION_STATEMENT:  INTEGER  STRUCT_DECLARE 
|  REAL  STRUCT_DECLARE
|  TEXT  STRUCT_DECLARE
|  BOOL  STRUCT_DECLARE
|  TABLEAU  STRUCT_DECLARE 
|  STRUCT_DECLARE  STRUCT_DECLARE

/* RECORD_DECLARATION:
  RECORD STRUCT_DECLARE COLON CURLY_OPEN_BRACKET TYPE  SEMICOLON CURLY_CLOSE_BRACKET
;

TABLE_DECLARATION:
  TYPE STRUCT_DECLARE OPEN_BRACKET INTEGER CLOSE_BRACKET 
; */


EXPRESSION: EXPRESSION  ADD EXPRESSION { $$ = $1 + $3; }
| EXPRESSION  SUB EXPRESSION { $$ = $1 - $3 ;}
| EXPRESSION  MULT EXPRESSION { $$ = $1 * $3 ;}
| EXPRESSION  DIV EXPRESSION { $$ = $1 / $3 ;}
| EXPRESSION  MOD EXPRESSION { $$ = $1 % $3 ;}
| EXPRESSION  AND EXPRESSION { $$ = $1 && $3;}
| EXPRESSION  OR EXPRESSION  { $$ = $1 || $3;}
| EXPRESSION  LESS EXPRESSION { $$ = $1 < $3;}
| EXPRESSION  GREATER EXPRESSION { $$ = $1 > $3;}
| EXPRESSION  LESSEQUAL EXPRESSION { $$ = $1 <= $3;}
| EXPRESSION  GREATEREQUAL EXPRESSION { $$ = $1 >= $3;}
| EXPRESSION  EQUAL EXPRESSION { $$ = $1 == $3;}
| EXPRESSION  DIFFERENT EXPRESSION { $$ = $1 != $3;}
| OPEN_PARENTHESIS EXPRESSION  CLOSE_PARENTHESIS { $$ = $2;}
| NOT EXPRESSION { $$ = !$2 ; } 
| STRUCT_DECLARE 
| INTEGER
| REAL
| BOOL
| TEXT
| STRUCT_VALUE
| OPEN_BRACKET TABLEVALUE  CLOSE_BRACKET
| ARRAY_ELEMENT


STRUCT_VALUE : STRUCT_VALUE  DOT  STRUCT_DECLARE
|  STRUCT_DECLARE  DOT  STRUCT_DECLARE
;


ARRAY_ELEMENT :  STRUCT_DECLARE  OPEN_BRACKET    CLOSE_BRACKET
|  STRUCT_DECLARE  OPEN_BRACKET  STRUCT_DECLARE  CLOSE_BRACKET
|  STRUCT_DECLARE  OPEN_BRACKET ARRAY_ELEMENT  CLOSE_BRACKET
;


TABLEVALUE : TABLEVALUE  COMMA EXPRESSION
| EXPRESSION_STATEMENT
;



%%
main(int argc, char **argv)
{
  yyparse();
}

yyerror(char *s)
{
  fprintf(stderr, "Error: %s\n", s);
}